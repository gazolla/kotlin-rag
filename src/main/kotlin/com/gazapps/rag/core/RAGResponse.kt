package com.gazapps.rag.core

/**
 * Represents the response from a RAG query.
 * 
 * Contains the answer generated by the language model and the relevant documents
 * used to generate this response.
 */
data class RAGResponse(
    /**
     * Text answer generated by the language model.
     */
    val answer: String,
    
    /**
     * List of retrieved documents with their relevance scores.
     */
    val documents: List<ScoredDocument>,
    
    /**
     * Additional metadata about the response, such as processing time,
     * confidence, etc.
     */
    val metadata: Map<String, Any> = emptyMap(),
    
    /**
     * Processing time in milliseconds.
     */
    val processingTimeMs: Long = 0
) {
    /**
     * Returns the highest scoring document, or null if no documents were retrieved.
     */
    val topDocument: ScoredDocument?
        get() = documents.maxByOrNull { it.score }
    
    /**
     * Returns the average score of all retrieved documents.
     */
    val averageScore: Float
        get() = if (documents.isEmpty()) 0f else documents.map { it.score }.average().toFloat()
    
    /**
     * Returns a string representation of the document sources used.
     */
    fun getSourceSummary(): String {
        return documents
            .mapNotNull { it.document.metadata["source"]?.toString() }
            .distinct()
            .joinToString(", ")
    }
}

/**
 * Document with associated relevance score.
 */
data class ScoredDocument(
    /**
     * The retrieved document.
     */
    val document: Document,
    
    /**
     * Relevance (similarity) score between 0 and 1.
     */
    val score: Float
)
